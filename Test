from fenlaiMGAI import model_ft, imshow
import torch
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
# Test set path
test_data_dir = r'......'
test_transforms = transforms.Compose([
    #transforms.RandomResizedCrop(224),
    #transforms.Grayscale(num_output_channels=3),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# Load the test dataset
test_dataset = datasets.ImageFolder(test_data_dir, test_transforms)
test_dataloader = torch.utils.data.DataLoader(test_dataset, batch_size=4, shuffle=False, num_workers=0)
class_names = test_dataset.classes
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
def test_model(model, test_dataloader):
    model.eval()  
    running_corrects = 0

    with torch.no_grad():  
        for inputs, labels in test_dataloader:
            inputs = inputs.to(device)
            labels = labels.to(device)
            outputs = model(inputs)
            _, preds = torch.max(outputs, 1)  
            running_corrects += torch.sum(preds == labels.data)

    # Calculating the test accuracy rate
    test_acc = running_corrects.double() / len(test_dataset)
    print(f'Test Accuracy: {test_acc:.4f}')


def visualize_test_results(model, test_dataloader, num_images=10):
    model.eval() 
    images_so_far = 0
    fig = plt.figure(figsize=(15, 10))
    plt.subplots_adjust(hspace=0.5)

    with torch.no_grad(): 
        for inputs, labels in test_dataloader:
            inputs = inputs.to(device)
            labels = labels.to(device)

            outputs = model(inputs)
            _, preds = torch.max(outputs, 1) 

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(2, num_images //2, images_so_far)
                ax.axis('off')
                ax.set_title(f'Pred: {class_names[preds[j]]}\nTrue: {class_names[labels[j]]}')
                #ax.set_title(f'Pred: {class_names[preds[j]]}')
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    return

'''
# Saving the model parameters
output_file = "......"
def save_test_results(model, test_dataloader, output_file='test_results.txt'):
    model.eval()
    results = []

    with torch.no_grad():
        for inputs, labels in test_dataloader:
            inputs = inputs.to(device)
            labels = labels.to(device)

            outputs = model(inputs)
            _, preds = torch.max(outputs, 1)

            for j in range(inputs.size()[0]):
                results.append(f'Image: {images_so_far}, Predicted: {class_names[preds[j]]}, True: {class_names[labels[j]]}')

    with open(output_file, 'w') as f:
        for line in results:
            f.write(line + '\n')

save_test_results(model_conv, test_dataloader)
'''
# Calling the test function
test_model(model_ft, test_dataloader)
visualize_test_results(model_ft, test_dataloader)
plt.show()

import argparse
import os
import numpy as np
import torchvision
from torchvision import transforms as T
from torchvision.utils import save_image
from torch.utils.data import DataLoader
from torch.autograd import Variable
import torch.nn as nn
import torch
import matplotlib.pyplot as plt
plt.rcParams['font.family'] = 'Arial'  
plt.rcParams['font.size'] = 24  
# Set parameters
os.makedirs("images", exist_ok=True)
parser = argparse.ArgumentParser()
parser.add_argument("--n_epochs", type=int, default=1000, help="number of epochs of training")
parser.add_argument("--batch_size", type=int, default=4, help="size of the batches")
parser.add_argument("--lr", type=float, default=0.00005, help="learning rate")
parser.add_argument("--n_cpu", type=int, default=8, help="number of cpu threads to use during batch generation")
parser.add_argument("--latent_dim", type=int, default=100, help="dimensionality of the latent space")
parser.add_argument("--img_size", type=int, default=77, help="size of each image dimension")
parser.add_argument("--channels", type=int, default=1, help="number of image channels")
parser.add_argument("--n_critic", type=int, default=5, help="number of training steps for discriminator per iter")
parser.add_argument("--clip_value", type=float, default=0.005, help="lower and upper clip value for disc. weights")
parser.add_argument("--sample_interval", type=int, default=400, help="interval betwen image samples")
opt = parser.parse_args()
print(opt)

img_shape = (opt.channels, opt.img_size, opt.img_size)

cuda = True if torch.cuda.is_available() else False

# Define Generator
class Generator(nn.Module):
    def __init__(self):
        super(Generator, self).__init__()

        def block(in_feat, out_feat, normalize=True):
            layers = [nn.Linear(in_feat, out_feat)]
            if normalize:
                layers.append(nn.BatchNorm1d(out_feat, 0.8))
            layers.append(nn.LeakyReLU(0.2, inplace=True))
            return layers

        self.model = nn.Sequential(
            *block(opt.latent_dim, 128, normalize=False),
            *block(128, 256),
            *block(256, 512),
            *block(512, 1024),
            nn.Linear(1024, int(np.prod(img_shape))),
            nn.Tanh()
        )

    def forward(self, z):
        img = self.model(z)
        img = img.view(img.shape[0], *img_shape)
        return img

# Define Critic
class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()

        self.model = nn.Sequential(
            nn.Linear(int(np.prod(img_shape)), 512),#np.prod(img_shape)
            nn.LeakyReLU(0.2, inplace=True),
            nn.Linear(512, 256),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Linear(256, 1),
        )

    def forward(self, img):
        img_flat = img.view(img.shape[0], -1)
        validity = self.model(img_flat)
        return validity

generator = Generator()
discriminator = Discriminator()

if cuda:
    generator.cuda()
    discriminator.cuda()


# Data set input address
root = r'......'
transform  = T.Compose([
         T.Grayscale(),
         T.ToTensor(),
         #T.Normalize(mean=[0.5], std=[0.5])
])
train_data = torchvision.datasets.ImageFolder(root, transform=transform)
dataloader = torch.utils.data.DataLoader(train_data, batch_size=4, shuffle=True, num_workers=0)
optimizer_G = torch.optim.RMSprop(generator.parameters(), lr=opt.lr)
optimizer_D = torch.optim.RMSprop(discriminator.parameters(), lr=opt.lr)
Tensor = torch.cuda.FloatTensor if cuda else torch.FloatTensor
best_loss_diff = float('inf')
best_generator_state = None
best_discriminator_state = None
best_z = None
batches_done = 0
D_losses = []
G_losses = []
real_scores_list = []
fake_scores_list = []
for epoch in range(opt.n_epochs):

    for i, (imgs, _) in enumerate(dataloader):
        real_imgs = Variable(imgs.type(Tensor))
        optimizer_D.zero_grad()
        z = Variable(Tensor(np.random.normal(0, 1, (imgs.shape[0], opt.latent_dim))))
        fake_imgs = generator(z).detach()
        real_scores = torch.mean(discriminator(real_imgs)) 
        fake_scores = torch.mean(discriminator(fake_imgs))  
        loss_D = -torch.mean(discriminator(real_imgs)) + torch.mean(discriminator(fake_imgs))
        loss_D.backward()
        optimizer_D.step()
        for p in discriminator.parameters():
            p.data.clamp_(-opt.clip_value, opt.clip_value)
        if i % opt.n_critic == 0:
            optimizer_G.zero_grad()
            gen_imgs = generator(z)
            loss_G = -torch.mean(discriminator(gen_imgs))
            loss_G.backward()
            optimizer_G.step()

            D_losses.append(loss_D.item())
            G_losses.append(loss_G.item())
            real_scores_list.append(real_scores.item())
            fake_scores_list.append(fake_scores.item())

            print(
                "[Epoch %d/%d] [Batch %d/%d] [D loss: %f] [G loss: %f]"
                % (epoch, opt.n_epochs, batches_done % len(dataloader), len(dataloader), loss_D.item(), loss_G.item())
            )
        '''
        # Define the selection conditions of the optimal model
        loss_diff = (real_scores.item() - fake_scores.item())
        if loss_diff < best_loss_diff:
            best_loss_diff = loss_diff
            best_generator_state = generator.state_dict()
            best_discriminator_state = discriminator.state_dict()
            best_z = z.detach().clone()
        '''

    if epoch % opt.sample_interval == 0:
        with torch.no_grad():
            sample_z = Variable(Tensor(np.random.normal(0, 1, (imgs.shape[0], opt.latent_dim))))
            generated_imgs = generator(sample_z)
            nz = sample_z
            # One of the intervention methods - adding constant values to the four parts
            z2 = nz.clone()
            z2[0, 0:49] = 4
            z2[1, 0] = 0
            z3 = nz.clone()
            z3[0, 50:99] = 4
            z3[1, :] = 0
            z4 = nz.clone()
            z4[0, :] = 0
            z4[1, 0:49] = 4
            z5 = nz.clone()
            z5[0, :] = 0
            z5[1, 50:99] = 4
            g1 = nz + z2
            g2 = nz + z3
            g3 = nz + z4
            g4 = nz + z5
            generated_imagesgy1 = generator(g1)
            generated_imagesgy2 = generator(g2)
            generated_imagesgy3 = generator(g3)
            generated_imagesgy4 = generator(g4)
            imagesjgy_path1 = "......" % batches_done
            imagesjgy_path2 = "......" % batches_done
            imagesjgy_path3 = "......" % batches_done
            imagesjgy_path4 = "......" % batches_done
            save_image(generated_imagesgy1[0], imagesjgy_path1)
            save_image(generated_imagesgy2[0], imagesjgy_path2)
            save_image(generated_imagesgy3[0], imagesjgy_path3)
            save_image(generated_imagesgy4[0], imagesjgy_path4)
            image_path = "C:/PyCharm/GANS/wgansupout/%d.png" % batches_done
            save_image(generated_imgs[0], image_path)  
    batches_done += 1

# Draw the loss curve after the training is completed
plt.figure(figsize=(10, 5))
plt.title("Generator and Discriminator Loss During NOR Training")
plt.plot(G_losses, label="G Loss", color="blue")
plt.plot(D_losses, label="D Loss", color="orange")
plt.xlabel("Iterations")
plt.ylabel("Loss")
plt.legend()
plt.grid()
plt.show()

# Draw the scoring curve of the discriminator for the real/generated data
plt.figure(figsize=(10, 5))
plt.title("Real and Fake Scores During NOR Training")
plt.plot(real_scores_list, label="Real Scores", color="green")
plt.plot(fake_scores_list, label="Fake Scores", color="red")
plt.xlabel("Iterations")
plt.ylabel("Score")
plt.legend()
plt.grid()
plt.show()
